name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Set Default Scheme
      #   run: |
      #     scheme_list=$(xcodebuild -list -json | tr -d "\n")
      #     default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
      #     echo $default | cat >default
      #     echo Using default scheme: $default
  sonarscan:
    runs-on: ubuntu-latest
    steps:
      - name : sonar
        uses: SonarSource/sonarqube-scan-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          #token: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=shriyrao_samplecode
            -Dsonar.projectName=samplecode
            -Dsonar.projectVersion=1.0
            -Dsonar.language=swift
            -Dsonar.projectDescription="" 
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*.html,**/*.json,**/*.xml
            -Dsonar.swift.workspace=ofcwork.xcworkspace
            -Dsonar.swift.appScheme=ofcwork
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.swift.excludedPathsFromCoverage=.*Tests.*
            -Dsonar.organization=shriyrao

        
      # - name: Build
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     pwd
          # pod install
          #xcodebuild -scheme ofcwork -project ofcwork.xcodeproj -archivePath ofcwork.xcarchive -derivedDataPath .  -configuration "Release" CODE_SIGN_IDENTITY="" CODE_SIGNING_ALLOWED=NO archive
          
      # - name: Download and install the SonarScanner
      #   run: |
      #     #pwd
      #     #echo $HOME
      #     curl -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-macosx.zip
      #     ls -al
      #     sleep 5s
      #     #unzip $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      # - name: SonarQube Scan
      #   run: |
      #     $HOME/.sonar/sonar-scanner
      #     cat > sonar-project.properties <<- "EOF" 
      #       sonar.name=test-sample
      #       sonar.token=${{ secrets.SONAR_TOKEN }} 
      #       sonar.host.url=${{ secrets.SONAR_HOST_URL }}
      #       sonar.key=test-sample
      #       sonar.sourceEncoding=UTF-8
      #       sonar.swift.appScheme=ofcwork
      #       sonar.swift.project=ofcwork.xcodeproj
      #       sonar.swift.excludedPathsFromCoverage=.*Tests.*
      #       sonar.projectVersion=1.0.0.1
      #       sonar.sources=.
      #       sonar.swift.simulator=platform=iOS Simulator,name=iPhone 14,OS=16.4
      #       EOF

      #       ls -al

      # - name: Test
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #     # device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #     # if [ $scheme = default ]; then scheme=$(cat default); fi
      #     # if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #     # file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #     # xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
